apply plugin: "eclipse"
apply plugin: "war"
apply plugin: "appengine"
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: "findbugs"
apply plugin: "jacoco"

def appengineVersion = "1.9.27"
def libsVersion = "5.60"
def libsUrl = "http://www.comp.nus.edu.sg/~seer/teammates-libs/libsV${libsVersion}.zip"
def libsPath = "libs/libsV${libsVersion}.zip"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.appengine:gradle-appengine-plugin:1.9.27"
    }
}

configurations {
    enhancer
}

configurations.all {
    resolutionStrategy {
        force "commons-codec:commons-codec:1.6"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    appengineSdk    "com.google.appengine:appengine-java-sdk:${appengineVersion}"

    compile         "com.fasterxml.jackson.core:jackson-core:2.1.3",
                    "com.google.api-client:google-api-client-appengine:1.18.0-rc",
                    "com.google.api-client:google-api-client:1.18.0-rc",
                    "com.google.apis:google-api-services-storage:v1beta2-rev47-1.18.0-rc",
                    "com.google.appengine.orm:datanucleus-appengine:1.0.10",
                    "com.google.appengine.tools:appengine-gcs-client:0.3.13",
                    "com.google.appengine:appengine-api-1.0-sdk:${appengineVersion}",
                    "com.google.appengine:appengine-endpoints-deps:${appengineVersion}",
                    "com.google.appengine:appengine-endpoints:${appengineVersion}",
                    "com.google.appengine:appengine-jsr107cache:${appengineVersion}",
                    "com.google.code.gson:gson:2.2.2",
                    "com.google.guava:guava:15.0",
                    "commons-fileupload:commons-fileupload:1.3.1",
                    "javax.jdo:jdo2-api:2.3-eb",
                    "org.apache.geronimo.specs:geronimo-jpa_3.0_spec:1.1.1",
                    "org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1",
                    "org.datanucleus:datanucleus-core:1.1.5",
                    "org.datanucleus:datanucleus-jpa:1.1.5",
                    "xerces:xercesImpl:2.9.1"

    enhancer        "javax.jdo:jdo2-api:2.3-eb",
                    "com.google.code.gson:gson:2.2.2",
                    "com.google.appengine.orm:datanucleus-appengine:1.0.10",
                    "org.datanucleus:datanucleus-core:1.1.5",
                    "org.datanucleus:datanucleus-jpa:1.1.5",
                    "com.google.appengine:appengine-api-1.0-sdk:${appengineVersion}"

    providedCompile "com.google.appengine:appengine-api-labs:${appengineVersion}",
                    "com.google.appengine:appengine-api-stubs:${appengineVersion}",
                    "com.google.appengine:appengine-remote-api:${appengineVersion}",
                    "com.google.appengine:appengine-testing:${appengineVersion}",
                    "httpunit:httpunit:1.7",
                    "javax.mail:mail:1.4.5",
                    "org.testng:testng:6.8.7"

    testRuntime     "com.google.appengine:appengine-tools-sdk:${appengineVersion}",
                    "org.seleniumhq.selenium:selenium-java:2.46.0"

    // Hack to get selenium-server-standalone from URL
    def f = file("libs/selenium-server-standalone-2.46.jar")
    f.getParentFile().mkdirs()
    if (!f.exists()) {
        new URL("http://selenium-release.storage.googleapis.com/2.46/selenium-server-standalone-2.46.0.jar")
            .withInputStream{i -> f.withOutputStream{ it << i }}
    }
    providedCompile fileTree(dir: "libs", include: ["*.jar"])
}

sourceSets {
    empty {
        // Placeholder empty source for downloading all static analysis tools without running anything
        java {
            srcDir "static-analysis"
        }
    }
    main {
        java {
            srcDir "src/main/java"
            include "**/*.java"
        }
        resources {
            srcDir "src/main/resources"
            exclude "**/*.java"
        }
    }
    test {
        java {
            srcDir "src/test/java"
            srcDir "src/client/java"
            include "**/*.java"
        }
        resources {
            srcDir "src/test/resources"
            exclude "**/*.java"
        }
    }
}

// SETUP TASKS

eclipse {
    project {
        natures "org.eclipse.jdt.core.javanature", "com.google.appengine.eclipse.core.gaeNature", "org.eclipse.wst.jsdt.core.jsNature"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.google.gdt.eclipse.core.webAppProjectValidator"
        buildCommand "com.google.appengine.eclipse.core.enhancerbuilder"
        buildCommand "com.google.appengine.eclipse.core.projectValidator"
        buildCommand "org.eclipse.wst.validation.validationbuilder"
    }
}

eclipseProject {
    onlyIf {
        !(new File(".project")).exists()
    }
}

task copyTemplateConfigs << {
    def templatesToCopy = [
        "src/main/resources/build.template.properties",
        "src/test/resources/test.template.properties",
        "src/main/webapp/WEB-INF/appengine-web.template.xml",
        ".settings/com.google.gdt.eclipse.core.template.prefs"
    ]
    templatesToCopy.findAll {
        !(new File(it.replace(".template", ""))).exists()
    }.each {
        filename -> copy {
            from filename
            into new File(filename).getParent()
            rename '(.*).template(.*)', '$1$2'
        }
    }
}

task populateProjectDir << {
    def filesToPopulate = [
        ".settings/com.google.gdt.eclipse.core.template.prefs"
    ]
    filesToPopulate.each { filename ->
        filename = filename.replace(".template", "")
        def filecontents = new File(filename).getText('UTF-8')
        new File(filename).text = filecontents.replaceAll(/\*/, projectDir.canonicalPath)
    }
}

task createConfigs {
    dependsOn copyTemplateConfigs, populateProjectDir
}

task downloadLibs {
    onlyIf {
        !(new File(libsPath)).exists()
    }
    doFirst {
        def currentDependencies = new File(libsPath)
        currentDependencies.getParentFile().mkdirs()
        new URL(libsUrl).withInputStream{i -> currentDependencies.withOutputStream{ it << i }}
    }
}

task updateLibs {
    def zipFile = new File(libsPath)
    def libsDir = new File(zipFile.getParentFile(), 'src')
    doFirst {
        copy {
            from zipTree(zipFile)
            into zipFile.getParentFile()
        }
        copy {
            from libsDir
            into new File(projectDir, 'src')
        }
    }
    doLast {
        libsDir.deleteDir()
    }
    dependsOn downloadLibs
}

task setup {
    description "Sets up the project by obtaining necessary files and configurations points."
    group "Setup"
    dependsOn eclipseProject, updateLibs, createConfigs
}

// RUN SERVER TASKS

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

appengine {
    httpPort = 8888
    downloadSdk = true
    jvmFlags = ["-Duser.timezone=UTC", "-Xss2m", "-Dfile.encoding=UTF-8"]
    appcfg {
        oauth2 = true
    }
}

appengineRun {
    if (project.hasProperty("disable_daemon")) {
        daemon = false
    } else {
        daemon = true
    }
}

task enhancerRun << {
    def path = System.getProperty("java.class.path") + ":" + project.gradle.gradleUserHomeDir + "/appengine-sdk/appengine-java-sdk-${appengineVersion}/lib/appengine-tools-api.jar"
    ant.taskdef(name: "enhance", classpath: path, classname: "com.google.appengine.tools.enhancer.EnhancerTask")
    ant.enhance(failonerror: true, verbose: true) {
        classpath {
            pathelement(path: path)
            pathelement(path: sourceSets.main.output.classesDir.canonicalPath)
            pathelement(path: project.configurations.enhancer.asPath)
        }
        fileset(dir: sourceSets.main.output.classesDir.canonicalPath, includes: "teammates/storage/entity/*.class")
        arg(value: "-enhancerVersion"); arg(value: "v1")
        arg(value: "-api"); arg(value: "JPA")
    }
}

enhancerRun.dependsOn project.classes
enhancerRun.shouldRunAfter project.testClasses
war.dependsOn enhancerRun

// STATIC ANALYSIS TASKS

def isWindows = System.getProperty("os.name").toLowerCase().contains("windows")

task eslint(type: Exec) {
    def command = ["eslint"]
    def jsDirs = ["src/main/webapp/js", "src/test/javascript"]
    def configFile = ["-c", "static-analysis/teammates-eslint.yml"]
    commandLine = (isWindows ? ["cmd", "/c"] : []) + command + jsDirs + configFile
}

checkstyle {
    toolVersion = "6.18"
    configFile = file("static-analysis/teammates-checkstyle.xml")
}

pmd {
    toolVersion = "5.4.1"
    consoleOutput = true
    ruleSetFiles = files("static-analysis/teammates-pmd.xml")
    ruleSets = []
}

pmdMain.dependsOn compileJava
pmdTest.dependsOn compileTestJava

findbugs {
    toolVersion = "3.0.1"
    visitors = [
        "FindDeadLocalStores"
    ]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task downloadStaticAnalysisTools {
    description "Downloads all static analysis tools."
    group "Static analysis"
    dependsOn checkstyleEmpty, pmdEmpty, findbugsEmpty
}

task staticAnalysisMain {
    dependsOn checkstyleMain, pmdMain, findbugsMain
}

task staticAnalysisTest {
    dependsOn checkstyleTest, pmdTest, findbugsTest
}

task staticAnalysis {
    description "Runs the entire static analysis tasks."
    group "Static analysis"
    dependsOn eslint, staticAnalysisMain, staticAnalysisTest
}

// TEST TASKS

def numOfTestRetries = 3
def isTravis = System.getenv("TRAVIS") != null
def failedXmlPath = "test-output/testng-failed.xml"
def failedXmlUrl = "https://gist.githubusercontent.com/anonymous/gist_id/raw/"

(1..numOfTestRetries + 1).each { id ->
    task "killFirefox${id}"(type: Exec) {
        doFirst {
            if (isWindows) {
                commandLine "TASKKILL", "/F", "/IM", "firefox.exe"
            } else {
                commandLine "pkill", "firefox"
            }
            // Silence output for this task
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
        }
        ignoreExitValue = true
        outputs.upToDateWhen { false }
    }
}

def afterTestClosure = { descriptor, result ->
    if (result.resultType == TestResult.ResultType.FAILURE && result.exception != null && result.exception.getMessage() != null) {
        def msg = result.exception.getMessage()
        def shouldDiff = msg.indexOf("<<[expected>\n") != -1
        if (shouldDiff) {
            file("expected").text = msg[(msg.indexOf("<<[expected>\n") + 13)..(msg.indexOf("\n</expected]>>") - 1)]
            file("actual").text = msg[(msg.indexOf("<<[actual>\n") + 11)..(msg.indexOf("\n</actual]>>") - 1)]
            if (isWindows) {
                def process = "FC expected actual".execute()
                println "Diff for " + descriptor.getClassName() + "." + descriptor.getName() + ":\n"
                println process.getText()
                process.waitFor()
            } else {
                def process = "diff expected actual".execute()
                println "Diff for " + descriptor.getClassName() + "." + descriptor.getName() + ":\n"
                println process.getText()
                process.waitFor()
            }
        }
    }
}

test {
    useTestNG()
    options.suites "src/test/testng-travis.xml"
    options.useDefaultListeners = true
    options.outputDirectory = file("build/reports/test-try-1")
    ignoreFailures = numOfTestRetries != 0 ? true : false
    maxHeapSize = "1g"
    reports.html.enabled = false
    reports.junitXml.enabled = false
    if (isTravis) {
        jvmArgs "-Duser.timezone=UTC", "-Xss2m", "-Dfile.encoding=UTF-8", "-Djava.io.tmpdir=" + System.getenv("TRAVIS_BUILD_DIR")
    } else {
        jvmArgs "-Duser.timezone=UTC", "-Xss2m", "-Dfile.encoding=UTF-8"
    }
    testLogging {
        events "passed"
    }
    afterTest afterTestClosure
    finalizedBy "killFirefox1"
    dependsOn "enhancerRun"
}

task travisTests {
    description "Runs the full test suite and retries failed test up to ${numOfTestRetries} times."
    group "Test"
    dependsOn "test"
}

(1..numOfTestRetries).each { id ->
    def isLastRetry = id == numOfTestRetries ? true : false
    task "testRetry${id}"(type: Test) {
        useTestNG()
        options.suites("build/reports/test-try-${id}/testng-failed.xml")
        options.outputDirectory = file("build/reports/test-try-${id+1}")
        options.useDefaultListeners = true
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets.test.runtimeClasspath
        testSrcDirs = sourceSets.test.java.srcDirs as List
        ignoreFailures = isLastRetry ? false : true
        maxHeapSize = "1g"
        reports.html.enabled = false
        reports.junitXml.enabled = false
        if (isTravis) {
            jvmArgs "-Duser.timezone=UTC", "-Xss2m", "-Dfile.encoding=UTF-8", "-Djava.io.tmpdir=" + System.getenv("TRAVIS_BUILD_DIR")
        } else {
            jvmArgs "-Duser.timezone=UTC", "-Xss2m", "-Dfile.encoding=UTF-8"
        }
        testLogging {
            events "passed"
            if (isLastRetry) {
                exceptionFormat = "full"
            }
        }
        if (!isLastRetry) {
            afterTest afterTestClosure
        }
        finalizedBy "killFirefox${id+1}"
        dependsOn test, enhancerRun
        onlyIf {
            file("build/reports/test-try-${id}/testng-failed.xml").exists()
        }
    }
    travisTests.dependsOn "testRetry${id}"
}

task generateFailedCmd(type: Exec) {
    onlyIf {
        file("build/reports/test-try-${numOfTestRetries}/testng-failed.xml").exists()
    }
    def os = new ByteArrayOutputStream()
    doFirst {
        commandLine "gist", "-p", "build/reports/test-try-${numOfTestRetries}/testng-failed.xml"
        standardOutput = os
    }
    doLast {
        def gistUrl = os.toString()
        def gistHash = gistUrl.substring(gistUrl.lastIndexOf("/") + 1).replaceAll("\\s", "")
        logger.lifecycle("Run failed tests locally using the gradle task")
        logger.lifecycle("./gradlew -Pgist=${gistHash} downloadFailedXml")
        logger.lifecycle("followed by running \"Failed tests\" in Eclipse")
    }
}

task cleanTestOutputDir {
    def testOutputDir = new File("test-output")
    testOutputDir.deleteDir()
}

task downloadFailedXml {
    description "Downloads testng-failed.xml from a failed run in Travis."
    group "Test"
    onlyIf {
        project.hasProperty("gist")
    }
    doFirst {
        def failedXml = new File(failedXmlPath)
        failedXml.getParentFile().mkdirs()
        def downloadUrl = failedXmlUrl.replace(/gist_id/, project.getProperty("gist"))
        new URL(downloadUrl).withInputStream{i -> failedXml.withOutputStream{ it << i }}
    }
    doLast {
        logger.lifecycle("The failed xml has been downloaded successfully.")
        logger.lifecycle("You can now run the failed tests from Eclipse.")
    }
    dependsOn cleanTestOutputDir
}

// COVERAGE TASKS

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    description "Runs coverage session from available test run data."
    group "Test"
    sourceDirectories = files(sourceSets.main.java.srcDirs, sourceSets.test.java.srcDirs)
    classDirectories =  files(sourceSets.main.output, sourceSets.test.output)
    reports {
        xml.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/*.jar", "teammates/client/**/*", "**/*Filter.class", "**/*Servlet.class"])
        })
    }
}
